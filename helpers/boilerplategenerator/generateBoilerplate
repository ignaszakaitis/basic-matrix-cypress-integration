#!/usr/bin/env node

var argv = require('yargs/yargs')(process.argv.slice(2))
    .usage('Usage: $0 -t TESTID -o fileName')
    .alias("item","i")
    .alias("project","p")
    .demandOption([
        "item","project", "token"
    ])
    .help('h')
    .alias('h', 'help')
    .argv;


var fs = require('fs');
const { convert } = require('html-to-text');
const axios = require('axios');
const cheerio = require('cheerio');

let token = argv.token;


axios.defaults.baseURL = 'https://matrixspecs.matrixreq.com/rest/1/';
axios.defaults.headers.common['Authorization'] = "Token " +token;
axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';


// calculate CAT
let cat = argv.item.split("-")[0];

axios.get(argv.project + "/cat/"+cat ).then( cat =>{

    // Find Init stuff in description 
     let descriptionId = cat.data.fieldList.find((val)=> {return val.label == "Description"}).id; 
     let stepId = cat.data.fieldList.find((val)=> {return val.fieldType == "test_steps"}).id; 

    axios.get(argv.project + "/item/"+argv.item ).then((item)=>{
            let fieldValues = item.data.fieldValList.fieldVal; 
        let init = convert(fieldValues.find((val)=> val.id == descriptionId).value.replace(/&nbsp;/g," "));
        let steps =  JSON.parse(fieldValues.find((val)=> val.id == stepId).value);
        let headerContent = fs.readFileSync("templates/header", "utf8")
        console.log(headerContent);
        let safeItemName = argv.item.replace("-","_");
            console.log(`
        
/************************************ Test description ************************************
     ${init.replace("/*","**") }
*******************************************************************************************/
import { BaseTC} from "../../support/BaseTC";

const newProject = "P_${safeItemName}_"+BaseTC.getDateForProject();
const screenshotfolder = "automated/${argv.item}.ts";  /* This path has to be fixed. */

describe('${argv.item} - ${item.data.title}', () => {

    before(() => {
        
        cy.task("deleteFolder", "screenshots/" + screenshotfolder); 

    })
    after(()=>{
        cy.log(JSON.stringify(tc.results));
        cy.reportToXtcStepsPassed(screenshotfolder,tc.results);
    })
    
    it("${safeItemName + " " + item.data.title}",()=>{
/* Init */
\t\tcy.verifyTCAndCloneProject("${argv.item}",tc,newProject)
\t\ttc.init();
        /* Steps */
${steps.map((step)=> "\t\ttc.step_"+step.uid.replace("-","_") + "();").join("\n")}
    })
    
});

class ${safeItemName} extends BaseTC {

        init(){
                this.initResult([${steps.map((step)=>"'"+ step.uid +"'") .join(",")}]);
        }`);

        for (const step of steps) {

            let noHtmlAction = cheerio.load(step.action.replace(/&nbsp;/g," ").replace(/<br>/g,"\n")).text().replace(/\s/g," ");
            let noHtmlExpected = cheerio.load(step.expected.replace(/&nbsp;/g," ").replace(/<br>/g,"\n") ).text().replace(/\s/g," ");


    console.log(`\t
        /* --------------------------------------------------------------------------------------------------------------
        - UID : ${step.uid} 
        - Action : ${step.action.replace(/\s/g," ")} 
        - Expected: ${step.expected.replace(/\s/g," ")}
        -------------------------------------------------------------------------------------------------------------- */
        step_${step.uid.replace("-","_")} () {
            
          
            const stepUID =  '${step.uid}'; 
            cy.log(" #########  Step" + stepUID + "#########");
            cy.log(\`Action : ${noHtmlAction}\`);
            /**** testing code ****/


            /**** Reporting  ****/
            cy.log(\`Expected : ${noHtmlExpected.trim()}\`);
            //--- To customise 
            cy.screenshot(stepUID);
            this.addComment ( stepUID, " ${noHtmlExpected.trim()}", stepUID);
            //-----
        }
        `);
   

          }
    console.log(`
    }
    const tc = new ${safeItemName}(); 
    `)     
          let footer = fs.readFileSync("templates/footer", "utf8")
          console.log(footer);

    })

});

    
